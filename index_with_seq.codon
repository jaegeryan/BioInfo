import sys
from bio import *
from utils_with_seq import read_fasta
from sketch_with_hash import extract_minimizers
from typing import List, Dict, Tuple
from chain import Chain


class Index:
    sequences = List[seq]()
    seq_names = List[str]()
    seq_lens = List[int]()
    minimizer_index = Dict[str, List[Tuple[int, int]]]()

    def __init__(self):
        self.sequences = []            # List[seq]
        self.seq_names = []            # List[str]
        self.seq_lens = []             # List[int]
        self.minimizer_index = {}      # Dict[str, List[Tuple[int, int]]]
    
    def add_sequence(self, sequence: seq, name: str = ""):
        seq_id = len(self.sequences)
        self.sequences.append(sequence)
        self.seq_names.append(name)
        self.seq_lens.append(len(sequence))
        
        # 立即为这个序列建立minimizer索引
        minimizers = extract_minimizers(sequence, k=15, w=10)
        for pos, min_kmer in minimizers:
            if min_kmer not in self.minimizer_index:
                self.minimizer_index[min_kmer] = []
            self.minimizer_index[min_kmer].append((seq_id, pos))
    
    def save_index(self, filepath: str):
        try:
            with open(filepath, 'w') as f:
                f.write(f"num_seqs={len(self.seq_lens)}\n")
                
                for name, length, sequence in zip(self.seq_names, self.seq_lens, self.sequences):
                    f.write(f"{name}\t{length}\t{sequence}\n")

                for min_kmer, positions in self.minimizer_index.items():
                    pos_str = ",".join([f"{seq_id}:{pos}" for seq_id, pos in positions])
                    f.write(f"{min_kmer}\t{pos_str}\n")
            print(f"index saved to {filepath}")
        except IOError as e:
            print(f"error saving file {filepath}: {e}", file=sys.stderr)
            sys.exit(1)

    def load_index(self, index_filepath: str):
        try:
            with open(index_filepath, 'r') as f:
                content = f.read()
                lines = content.split('\n')
                
                if len(lines) < 1:
                    print("index file format error: missing metadata", file=sys.stderr)
                    sys.exit(1)
                
                num_seqs = int(lines[0].split('=')[1])
                
                current_line = 1
                for _ in range(num_seqs):
                    if current_line >= len(lines):
                        break
                    line = lines[current_line].strip()
                    current_line += 1
                    if not line:
                        continue
                    
                    parts = line.split('\t')
                    if len(parts) != 3:
                        print(f"sequence information format error: {line}", file=sys.stderr)
                        continue
                        
                    name, length_str, sequence = parts
                    try:
                        length = int(length_str)
                        self.seq_names.append(name)
                        self.seq_lens.append(length)
                        self.sequences.append(seq(sequence))
                    except ValueError:
                        print(f"sequence length format error: {length_str}", file=sys.stderr)
                        continue
                
                for line in lines[current_line:]:
                    line = line.strip()
                    if not line:
                        continue
                        
                    parts = line.split('\t')
                    if len(parts) != 2:
                        continue
                        
                    min_kmer, pos_str = parts
                    positions = []
                    
                    for pos_pair in pos_str.split(','):
                        if ':' not in pos_pair:
                            continue
                        seq_id_str, pos_str = pos_pair.split(':')
                        try:
                            seq_id = int(seq_id_str)
                            pos = int(pos_str)
                            positions.append((seq_id, pos))
                        except ValueError:
                            continue
                            
                    self.minimizer_index[min_kmer] = positions
                    
            print(f"index loaded from {index_filepath}")
        except IOError as e:
            print(f"error reading file {index_filepath}: {e}", file=sys.stderr)
            sys.exit(1)
            
    def query_sequence(self, query_seq: seq) -> List[Tuple[int, int, float]]:

        matches = []
        k = 15
        w = 10
        min_score = 10
        
        query_mins = extract_minimizers(query_seq, 15, 10)
        
        # 2. Check matches
        for q_pos, q_min in query_mins:
            if q_min in self.minimizer_index:
                for ref_id, r_pos in self.minimizer_index[q_min]:
                    # Check minimizer position and its surroundings
                    for offset in range(-5, 6):  # -5 to +5 offset
                        if q_pos + offset >= 0 and r_pos + offset >= 0:
                            try:
                                query_kmer = query_seq[q_pos+offset:q_pos+offset+k]
                                ref_kmer = self.sequences[ref_id][r_pos+offset:r_pos+offset+k]
                                weight = self._calculate_weight(query_kmer, ref_kmer)
                                if weight > 0:
                                    # print(f"\nQuery position {q_pos+offset}, Ref position {r_pos+offset}")
                                    # print(f"Query kmer: {query_kmer}")
                                    # print(f"Ref kmer:   {ref_kmer}")
                                    # print(f"Weight: {weight}")
                                    matches.append((q_pos+offset, r_pos+offset, weight))
                            except:
                                continue
        
        return matches

    def _calculate_weight(self, query_kmer: seq, ref_kmer: seq) -> float:
        """
        Use minimap2's scoring scheme to calculate the weight
        """
        if len(query_kmer) != len(ref_kmer):
            return 0.0
        
        # minimap2's scoring parameters
        match_score = 2
        mismatch_score = -4
        gap_open = -4
        gap_extend = -2
        
        # Calculate the base score
        score = 0
        matches = 0
        gaps = 0
        
        for q, r in zip(str(query_kmer), str(ref_kmer)):
            if q == r:
                score += match_score
                matches += 1
            else:
                score += mismatch_score
                if q == '-' or r == '-':
                    if gaps == 0:
                        score += gap_open
                    else:
                        score += gap_extend
                    gaps += 1
        
        return float(max(0, score))  # No negative score

    def _filter_and_chain_matches(self, matches: List[Tuple[int, int, float]]) -> List[Tuple[int, int, float]]:
        """
        Use minimap2's chaining strategy
        """
        if not matches:
            return []
        
        # minimap2's chaining parameters
        max_gap = 10000      # Maximum allowed gap
        min_chain_score = 40 # Minimum chaining score
        max_chain_skip = 25  # Maximum skip times
        
        # 1. Sort matches by query position
        matches.sort(key=lambda x: (x[0], x[1]))
        
        # 2. Merge adjacent matches
        merged = []
        current = matches[0]
        
        for next_match in matches[1:]:
            q_gap = next_match[0] - (current[0] + 15)
            r_gap = next_match[1] - (current[1] + 15)
            
            # Use minimap2's chaining conditions
            if (abs(q_gap) <= max_gap and 
                abs(r_gap) <= max_gap and
                abs(abs(q_gap) - abs(r_gap)) <= max_gap * 0.05):  # Allow 5% difference
                # Merge matches, accumulate weights
                current = (
                    current[0],
                    current[1],
                    current[2] + next_match[2]
                )
            else:
                if current[2] >= min_chain_score:  # Only keep chains with score higher than minimum score
                    merged.append(current)
                current = next_match
        
        if current[2] >= min_chain_score:
            merged.append(current)
        
        return merged

def init_index() -> Index:
    """
    initialize the index data structure

    Returns:
        Index: an index object containing sequences, seq_names, seq_lens, and minimizer_index
    """
    return Index()

def test_index_operations():
    print("\n=== Test index operations ===")
    
    # 1. Initialize index
    print("\n1. Initialize index")
    index = init_index()
    assert len(index.sequences) == 0, "Initial sequence list should be empty"
    assert len(index.minimizer_index) == 0, "Initial minimizer index should be empty"
    print("✓ Index initialized successfully")
    
    # 2. Add sequences and build index
    print("\n2. Add sequences and build index")
    test_seq = seq("CCACACCACACCCACACACCCACACACCACACCACACACCACACCACACCCACACACACACATCCTAACACTACCCTAACACAGCCCTAATCTAACCCTGGCCAACCTGTCTCTCAACTTACCCTCCATTACCCTGCCTCCACTCGTTACCCTGTCCCATTCAACCATACCACTCCGAACCACCATCCATCCCTCTACTTACTACCACTCACCCACCGTTACCCTCCAATTACCCATATCCAACCCACTG")
    index.add_sequence(test_seq, "test_seq")
    
    print(f"Sequence length: {len(test_seq)}")
    print(f"Minimizer index size: {len(index.minimizer_index)}")
    print(f"Some minimizers in the index:")
    sample_count = 0
    for min_kmer, positions in index.minimizer_index.items():
        if sample_count < 5:  # only show 5 examples
            print(f"  {min_kmer}: {positions}")
            sample_count += 1
    print("✓ Sequences added and index built successfully")
    
    # 3. Save index
    print("\n3. Save index to file")
    index.save_index("test_index.txt")
    print("✓ Index saved successfully")
    
    # 4. Load index
    print("\n4. Load index from file")
    loaded_index = init_index()
    loaded_index.load_index("test_index.txt")
    
    # Verify loaded index
    assert len(loaded_index.sequences) == len(index.sequences), "Loaded sequence count mismatch"
    assert len(loaded_index.minimizer_index) == len(index.minimizer_index), "Loaded minimizer index size mismatch"
    assert loaded_index.seq_names[0] == "test_seq", "Loaded sequence name mismatch"
    
    print("Verify loaded index:")
    print(f"   Sequence count: {len(loaded_index.sequences)}")
    print(f"  Minimizer index size: {len(loaded_index.minimizer_index)}")
    print(f"   Sequence name: {loaded_index.seq_names[0]}")
    print("✓ Index loaded and verified successfully")
    
    # 5. Compare original index and loaded index
    print("\n5. Compare original index and loaded index")
    # Check some minimizers are the same
    sample_count = 0
    for min_kmer in index.minimizer_index:
        if sample_count < 3:  # only show 3 examples
            original_positions = index.minimizer_index[min_kmer]
            loaded_positions = loaded_index.minimizer_index[min_kmer]
            print(f"Minimizer '{min_kmer}':")
            print(f"  Original positions: {original_positions}")
            print(f"  Loaded positions: {loaded_positions}")
            assert original_positions == loaded_positions, f"Positions mismatch: {min_kmer}"
            sample_count += 1
    print("✓ Index comparison successful")

    
    
def test_query():
    print("\n=== Test sequence query and chaining (minimap2 parameters) ===")
    
    # 1. Create index
    index = init_index()
    ref_seq = seq("CCACACCACACCCACACACCCACACACCACACCACACACCACACCACACCCACACACACACATCCTAACACTACCCTAACACAGCCCTAATCTAACCCTGGCCAACCTGTCTCTCAACTTACCCTCCATTACCCTGCCTCCACTCGTTACCCTGTCCCATTCAACCATACCACTCCGAACCACCATCCATCCCTCTACTTACTACCACTCACCCACCGTTACCCTCCAATTACCCATATCCAACCCACTG")
    index.add_sequence(ref_seq, "ref")
    
    # 2. Test exact matches chaining
    print("\n1. Test exact matches chaining")
    # get a long fragment, containing multiple possible matches
    exact_query = seq(str(ref_seq[10:100]))
    print(f"Query sequence length: {len(exact_query)}")
    print(f"Query region: 10-100")
    matches = index.query_sequence(exact_query)
    print(f"Chained matches: {matches}")
    chain = Chain(min_score=30, max_distance=50)
    optimal_chain, max_score = chain.chain_anchors(matches)
    print("Various matches")
    print(f"Optimal chain (various chains): {optimal_chain}")
    print(f"Maximum score: {max_score}\n")
    
    
    
    # 3. Test overlapping matches chaining
    print("\n2. Test overlapping matches chaining")
    # get two adjacent regions
    overlap_query = seq(str(ref_seq[50:150]))
    print(f"Query sequence length: {len(overlap_query)}")
    print(f"Query region: 50-150")
    matches = index.query_sequence(overlap_query)
    print(f"Chained matches: {matches}")
    
    # 4. Test chaining with gaps
    print("\n3. Test chaining with gaps")
    # get two regions with gaps
    gap_query = seq(str(ref_seq[20:50]) + str(ref_seq[100:130]))
    print(f"Query sequence length: {len(gap_query)}")
    print(f"Query region: 20-50 + 100-130")
    matches = index.query_sequence(gap_query)
    print(f"Chained matches: {matches}")
    
    # 5. Test multiple chaining
    print("\n4. Test multiple chaining")
    # get multiple regions with gaps
    multi_query = seq(str(ref_seq[10:30]) + str(ref_seq[50:70]) + str(ref_seq[90:110]))
    print(f"Query sequence length: {len(multi_query)}")
    print(f"Query region: 10-30 + 50-70 + 90-110")
    matches = index.query_sequence(multi_query)
    print(f"Chained matches: {matches}")


if __name__ == "__main__":
    # test_index_operations()
    test_query()