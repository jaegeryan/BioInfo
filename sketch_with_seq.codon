from bio import *

# Use Condon with seq to reimplement minimizer with window, but not implement the hash table like minimap2 did
def extract_minimizers(s, k: Static[int], w: Static[int]):
    """
    calculate the minimizers with window
    
    Args:
        s: input sequence
        k: k-mer length
        w: window size
    Returns:
        List[tuple[int, Kmer[k]]]: the position and minimizer
    """
    assert len(s) >= w >= k
    minimizers = []
    seen_kmers = {}
    
    # keep the original range: including the last window
    for i in range(len(s)-w+1):
        window = s[i:i+w]
        min_pos = i
        min_kmer = Kmer[k](window[:k])
        
        for j in range(w-k+1):
            kmer = Kmer[k](window[j:j+k])
            canonical = min(kmer, ~kmer)
            if canonical < min_kmer:
                min_kmer = canonical
                min_pos = i + j
        
        if min_kmer not in seen_kmers or min_pos - seen_kmers[min_kmer] >= w:
            minimizers.append((min_pos, min_kmer))
            seen_kmers[min_kmer] = min_pos
    
    return minimizers

# test
# s = s'AGCATACATAGCATAAAAAA'
# print(f"sequence length: {len(s)}")
# result = minimizer(s, k=3, w=5)
# print(result)