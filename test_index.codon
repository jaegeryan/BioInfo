from bio import *
from index import Index
from sketch import Minimizer
from utils import revcomp

def test_index_basic():
    """Test basic index functionality"""
    # Create index
    idx = Index(k=3, w=2)
    
    # Test simple sequence
    ref_seq = "ACGTACGT"
    idx.build(ref_seq)
    
    # Verify index is not empty
    assert len(idx.index) > 0, "Index should not be empty"
    
    # Test simple query
    query_seq = "ACGT"
    matches = idx.query(query_seq)
    
    # Verify matches are found
    assert len(matches) > 0, "Should find matches"
    
    # Verify match format
    for q_pos, r_pos, strand in matches:
        assert isinstance(q_pos, int), "Query position should be integer"
        assert isinstance(r_pos, int), "Reference position should be integer"
        assert strand in [-1, 1], "Strand should be -1 or 1"
    
    print("Basic index test passed!")

def test_index_empty():
    """Test index with empty sequences"""
    idx = Index(k=3, w=2)
    
    # Empty reference
    idx.build("")
    assert len(idx.index) == 0, "Empty reference should create empty index"
    
    # Empty query
    matches = idx.query("")
    assert len(matches) == 0, "Empty query should return no matches"
    
    print("Empty sequence test passed!")

def test_index_min_cnt():
    """Test minimum count filtering"""
    idx = Index(k=3, w=2, min_cnt=2)
    
    # Sequence with repeated k-mers
    ref_seq = "ACGACGACG"  # ACG appears multiple times
    idx.build(ref_seq)
    
    # Verify only frequent minimizers are kept
    for positions in idx.index.values():
        assert len(positions) >= 2, "Should only keep minimizers appearing >= min_cnt times"
    
    print("Minimum count test passed!")

def test_index_strand():
    """Test strand-specific matching"""
    idx = Index(k=3, w=2)
    
    # Build index with forward sequence
    ref_seq = "ACGTACGT"
    idx.build(ref_seq)
    
    # Query with reverse complement
    query_seq = revcomp("ACGT")  # ACGT -> ACGT
    matches = idx.query(query_seq)
    
    # Debug output
    print(f"Query sequence: {query_seq}")
    print(f"Matches found: {matches}")
    
    # Verify strand information
    found_reverse = False
    for q_pos, r_pos, strand in matches:
        print(f"Match: q_pos={q_pos}, r_pos={r_pos}, strand={strand}")
        if strand == -1:
            found_reverse = True
            break
    assert found_reverse, "Should find reverse complement matches"
    
    print("Strand handling test passed!")

def test_index_multiple():
    """Test index with multiple sequences"""
    idx = Index(k=3, w=2)
    
    # Build index with multiple sequences
    sequences = ["ACGTACGT", "TGCATGCA"]
    for seq in sequences:
        idx.build(seq)
    
    # Query each sequence
    for seq in sequences:
        matches = idx.query(seq[:4])  # Query first 4 bases
        assert len(matches) > 0, f"Should find matches for {seq[:4]}"
    
    print("Multiple sequence test passed!")

def main():
    """Run all tests"""
    print("Starting index tests...")
    
    test_index_basic()
    test_index_empty()
    test_index_min_cnt()
    test_index_strand()
    test_index_multiple()
    
    print("All index tests passed!")

if __name__ == "__main__":
    main() 