from bio import *
import sys

def read_fasta(filename: str) -> list[tuple[str, str]]:
    """
    Read sequences from a FASTA file
    
    Args:
        filename: Path to FASTA file
    
    Returns:
        List of (header, sequence) tuples
    """
    sequences = []
    try:
        with open(filename, 'r') as f:
            header = ""
            sequence = ""
            
            for line in f:
                line = line.strip()
                if not line:
                    continue
                    
                if line.startswith('>'):
                    # Save the previous sequence if exists
                    if header and sequence:
                        sequences.append((header, sequence))
                    # Start new sequence
                    header = line[1:]  # Remove '>' character
                    sequence = ""
                else:
                    sequence += line
                    
            # Don't forget to add the last sequence
            if header and sequence:
                sequences.append((header, sequence))
                
    except IOError as e:
        print(f"Error reading file {filename}: {e}", file=sys.stderr)
        sys.exit(1)
        
    return sequences

def read_fastq(filename: str) -> list[tuple[str, str]]:
    """
    Read sequences from a FASTQ file
    
    Args:
        filename: Path to FASTQ file
    
    Returns:
        List of (header, sequence) tuples
    """
    sequences = []
    try:
        with open(filename, 'r') as f:
            lines = f.read().split('\n')
            i = 0
            while i < len(lines):
                # Skip empty lines
                if not lines[i]:
                    i += 1
                    continue
                
                # Every 4 lines form a FASTQ record
                if i + 4 > len(lines):
                    break
                    
                header = lines[i].strip()
                sequence = lines[i + 1].strip()
                plus = lines[i + 2].strip()
                quality = lines[i + 3].strip()
                
                if not header.startswith('@'):
                    print(f"Error parsing file {filename}: Invalid FASTQ format: header line must start with '@': {header}", file=sys.stderr)
                    sys.exit(1)
                    
                if not plus.startswith('+'):
                    print(f"Error parsing file {filename}: Invalid FASTQ format: third line must start with '+'", file=sys.stderr)
                    sys.exit(1)
                    
                if len(sequence) != len(quality):
                    print(f"Error parsing file {filename}: Invalid FASTQ format: sequence and quality lengths differ", file=sys.stderr)
                    sys.exit(1)
                    
                # Remove '@' from header and store
                sequences.append((header[1:], sequence))
                i += 4
                
    except IOError as e:
        print(f"Error reading file {filename}: {e}", file=sys.stderr)
        sys.exit(1)
        
    return sequences

def revcomp(seq: str) -> str:
    """
    Get reverse complement of a DNA sequence
    
    Args:
        seq: DNA sequence
    
    Returns:
        Reverse complement sequence
    """
    complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A',
                 'a': 't', 'c': 'g', 'g': 'c', 't': 'a',
                 'N': 'N', 'n': 'n'}
    return ''.join(complement.get(base, base) for base in reversed(seq)) 