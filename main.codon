from bio import *
import sys
from sketch_with_hash import extract_minimizers 
from index_with_seq import Index, init_index
from utils_with_seq import read_fasta, read_fastq, revcomp 
from chain import Chain
from align import Aligner



"""
Main function for minimap2 implementation
Usage: codon run -plugin seq main.codon [options] <ref.fa> <query.fq> > approx-mapping.paf
"""

# def parse_args():
#     # default parameters
#     params = {
#         'preset': None,
#         'min_cnt': None,
#         'min_chain_score': None,
#         'k': 15,
#         'w': 10,
#         'bw': None,
#         'out_cs': False,
#         'out_MD': False
#     }
    
#     args = sys.argv[1:]
#     i = 0
#     while i < len(args):
#         if args[i].startswith('-'):
#             if args[i] == '-x':
#                 params['preset'] = args[i+1]
#                 i += 2
#             elif args[i] == '-n':
#                 params['min_cnt'] = int(args[i+1])
#                 i += 2
#             elif args[i] == '-m':
#                 params['min_chain_score'] = int(args[i+1])
#                 i += 2
#             elif args[i] == '-k':
#                 params['k'] = int(args[i+1])
#                 i += 2
#             elif args[i] == '-w':
#                 params['w'] = int(args[i+1])
#                 i += 2
#             elif args[i] == '-r':
#                 params['bw'] = int(args[i+1])
#                 i += 2
#             elif args[i] == '-c':
#                 params['out_cs'] = True
#                 i += 1
#             elif args[i] == '-M':
#                 params['out_MD'] = True
#                 i += 1
#         else:
#             break
    
#     # check if the number of input files is correct
#     if len(args[i:]) != 2:
#         print(__doc__)
#         sys.exit(1)
    
#     return params, args[i], args[i+1]

# def get_preset_params(preset: str) -> dict:
#     """Return preset parameters"""
#     if preset == "sr":  # short read
#         return {'k': 15, 'w': 10, 'min_chain_score': 40}
#     elif preset == "map-pb":  # PacBio reads
#         return {'k': 15, 'w': 5, 'min_chain_score': 30}
#     elif preset == "map-ont":  # Oxford Nanopore reads
#         return {'k': 15, 'w': 5, 'min_chain_score': 30}
#     elif preset == "asm5":  # asm-to-ref mapping, divergence <= 5%
#         return {'k': 19, 'w': 10, 'min_chain_score': 50}
#     elif preset == "asm10":  # asm-to-ref mapping, divergence <= 10%
#         return {'k': 19, 'w': 10, 'min_chain_score': 50}
#     elif preset == "splice":  # long-read spliced alignment
#         return {'k': 15, 'w': 5, 'min_chain_score': 30}
#     return {}

# def main():
#     # parse arguments
#     params, ref_file, query_file = parse_args()
    
#     # if preset is specified, update parameters
#     if params['preset']:
#         preset_params = get_preset_params(params['preset'])
#         params.update(preset_params)
    
#     # Read reference sequences
#     references = read_fasta(ref_file)
    
#     # Build index
#     index = Index(k=params['k'], w=params['w'], 
#                  min_cnt=params['min_cnt'])
#     for header, seq in references:
#         index.build(seq)
    
#     # Process queries
#     queries = read_fastq(query_file)
    
#     # Initialize components
#     chain = Chain(min_score=params['min_chain_score'], max_distance=params['bw'] or 50) #50 is default if not specified
#     aligner = Aligner(bandwidth=params['bw'])
    
#     # Process each query
#     for qheader, qseq in queries:
#         # Find matches
#         matches = index.query(qseq)
        
#         # Chain matches
#         chains = chain.chain_anchors(matches)
        
#         # Align and output results
#         for ref_header, ref_seq in references:
#             for chain in chains:
#                 alignment = aligner.align(qseq, ref_seq, chain,
#                                        out_cs=params['out_cs'],
#                                        out_MD=params['out_MD'])
#                 # output PAF format
#                 print(f"{qheader}\t{len(qseq)}\t{alignment}")

#Write to paf function
def write_to_paf(output_file, query_name, query_seq, ref_name, ref_seq, alignment, strand, mapping_quality):
    """
    Write alignment results to a PAF file.
    """
    query_length = len(query_seq)
    ref_length = len(ref_seq)
    query_start, query_end = alignment['query_start'], alignment['query_end']
    ref_start, ref_end = alignment['ref_start'], alignment['ref_end']
    matches = alignment['matches']
    block_length = alignment['block_length']


    #strand = "+"

    # print(f"Alignment dict: {alignment}")
    # print(f"Alignment values: {list(alignment.values())}")

    for key, value in alignment.items():
        if not isinstance(value, int):
            raise TypeError(f"Expected int for {key}, got {type(value)}")

    # Construct PAF line
    paf_line = [
        str(query_name),
        str(query_length),
        str(query_start),
        str(query_end),
        strand,
        str(ref_name),
        str(ref_length),
        str(ref_start),
        str(ref_end),
        str(matches),
        str(block_length),
        str(mapping_quality)
    ]

    with open(output_file, "a") as f:
        f.write("\t".join(map(str, paf_line)) + "\n")


#main
def main():
    if len(sys.argv) < 3:
        print("Usage: main.codon <reference.fa> <reads.fastq> < <output.paf>", file=sys.stderr)
        sys.exit(1)

    
    ref_file = sys.argv[1]
    reads_file = sys.argv[2]
    output_file = sys.stdout

        # 1. Load reference genome
    sequences = read_fasta(ref_file)
    ref_header, ref_genome = next(sequences)
    print(f"Loaded reference genome: {ref_header}, length: {len(ref_genome)}", file=sys.stderr)

        # 2. Build reference index
    minimizers = extract_minimizers(ref_genome, k=15, w=10)
    index = init_index()
    for pos, min_kmer in minimizers:
        if min_kmer not in index.minimizer_index:
            index.minimizer_index[min_kmer] = []
        index.minimizer_index[min_kmer].append((0, pos))
    print(f"Built index with {len(index.minimizer_index)} minimizers.", file=sys.stderr)


    print(f"Processing reads from {reads_file}...", file=sys.stderr)
    for read_header, read_seq in read_fastq(reads_file):
        query_mins = extract_minimizers(read_seq, k=15, w=10)
        matches = []
        for query_pos, min_kmer in query_mins:
            if min_kmer in index.minimizer_index:
                for ref_seq_idx, ref_pos in index.minimizer_index[min_kmer]:
                    matches.append((query_pos, ref_pos, 1))


        chain = Chain(min_score=1, max_distance=3)
        optimal_chain, max_score = chain.chain_anchors(matches)

        aligner = Aligner(match=2, mismatch=-1, gap_open=-2, gap_extend=-1, band_width=50)
        for query_start, ref_start, _ in optimal_chain:
            sub_ref = ref_genome[ref_start:ref_start+len(read_seq)]
            score, _ = aligner.banded_smith_waterman(sub_ref, read_seq)

            # Determine strand (+/- based on alignment score)
            strand = "+"
            rev = ~(sub_ref)
            rev_score, _ = aligner.banded_smith_waterman(rev, read_seq)
            if rev_score > score:
                strand = "-" 

            # Write PAF output using write_to_paf
            alignment = {
                'query_start': query_start,
                'query_end': query_start + len(read_seq),
                'ref_start': ref_start,
                'ref_end': ref_start + len(sub_ref),
                'matches': score,
                'block_length': len(read_seq)
            }

            write_to_paf(
                output_file,
                query_name=read_header,
                query_seq=read_seq,
                ref_name=ref_header,
                ref_seq=ref_genome,
                alignment=alignment,
                strand=strand,
                mapping_quality=255
            )






def test_with_genome():
    """
    test the whole process with real genome data:
    1. read the first sequence of sacCer3.fa
    2. extract minimizers
    3. build and query the index
    4. chain matches
    """
    print("=== start genome test ===")
    
    # 1. read sacCer3.fa
    print("\n1. read MT-human.fa")
    sequences = read_fasta("MT-human.fa")
    # print("\n1. read genome.fa")
    # sequences = read_fasta("genome.fa")
    print("\n1. read MT-Orang.fa")
    sequences = read_fasta("MT-Orang.fa")
    
    header, genome = next(sequences)  # get the first sequence
    
    print(f"genome information:")
    print(f"name: {header}")
    print(f"length: {len(genome)}")
    print(f"first 50bp: {genome[:50]}")
    
    # 2. test minimizer extraction
    print("\n2. test minimizer extraction")
    
    # for demonstration, use the first 1000bp for testing
    test_region = genome[:1000]
    print(f"\nuse the first 1000bp for testing")
    print(f"testing region length: {len(test_region)}")
    
    minimizers = extract_minimizers(test_region, k=15, w=10)
    print(f"number of minimizers found: {len(minimizers)}")
    print("\nfirst 5 minimizers:")
    count = 0
    for pos, min_kmer in minimizers:
        if count >= 5:
            break
        print(f"position: {pos}, k-mer: {min_kmer}")
        count += 1
    
    # 3. test index building and querying
    print("\n3. test index building and querying")
    
    # initialize index
    index = init_index()
    
    # add sequence to index
    index.sequences.append(test_region)
    index.seq_names.append(header)
    index.seq_lens.append(len(test_region))
    
    # add minimizers to index
    print("\nbuilding index...")
    for pos, min_kmer in minimizers:
        if min_kmer not in index.minimizer_index:
            index.minimizer_index[min_kmer] = []
        index.minimizer_index[min_kmer].append((0, pos))
    
    print(f"index statistics:")
    print(f"- number of sequences: {len(index.sequences)}")
    print(f"- number of different minimizers: {len(index.minimizer_index)}")
    
    # test querying
    print("\ntest querying...")
    # use a 100bp region as the query sequence
    query_seq = test_region[200:300]
    print(f"query sequence length: {len(query_seq)}")
    print(f"query sequence: {query_seq}")
    
    # extract minimizers from query sequence
    query_mins = extract_minimizers(query_seq, k=15, w=10)
    print(f"number of minimizers in query sequence: {len(query_mins)}")
    

    #Find matches
    matches = []
    for query_pos, min_kmer in query_mins:
        if min_kmer in index.minimizer_index:
            for ref_seq_idx, ref_pos in index.minimizer_index[min_kmer]:
                matches.append((query_pos, ref_pos, 1))  
                # Think a scoring system may need to be added. 1 is just a placeholder for now


    
    print(f"found matches: {len(matches)}")
    print(f"matches: {matches}")


    #4. Test chaining
    print("\nTest chaining")
    chain = Chain(min_score=1, max_distance=3)
    optimal_chain, max_score = chain.chain_anchors(matches)
    print(f"Optimal Chain: {optimal_chain}")
    print(f"Max score: {max_score}")

    print("\n=== test passed ===")

    print("\nTest alignment")
    aligner = Aligner(match=2, mismatch=-1, gap_open=-2, gap_extend=-1, band_width=50)

    ref_header = header
    ref_seq = genome


    alignment_results = []
    strand = "+"  

    for query_start, ref_start, _ in optimal_chain:
        sub_ref = ref_seq[ref_start:ref_start+len(query_seq)]
        score, pos = aligner.banded_smith_waterman(sub_ref, query_seq)

        #Default strand is +, if revcomp score > score, strand is -
        strand = "+"
        rev = ~(sub_ref)
        rev_score, _ = aligner.banded_smith_waterman(rev, query_seq)
        if score < rev_score: 
            strand = "-"

        alignment_results.append({
            'query_start': query_start,
            'query_end': query_start + len(query_seq), 
            'ref_start': ref_start,
            'ref_end': ref_start + len(sub_ref),  
            'matches': score, 
            'block_length': len(query_seq)  
        })

        #* Implement scoring system for mapping quality.
        # best_score = float('-inf')
        # second_best_score = float('-inf')
        # for alignment in alignment_results:
        #     print(best_score)
        #     if best_score > 0:
        #         if second_best_score > float('-inf'):
        #             print(second_best_score)
        #             mapping_quality = int(255 * (1 - (second_best_score / best_score)))
        #         else:
        #             mapping_quality = 255  # No second-best score
        #     else:
        #         mapping_quality = 0  # No meaningful alignment

    mapping_quality = 255
    output_file = "output.paf"
    for alignment in alignment_results:
        write_to_paf(output_file, "query1", query_seq, ref_header, ref_seq, alignment, strand, mapping_quality)

    
if __name__ == "__main__":
    # main()
    test_with_genome()