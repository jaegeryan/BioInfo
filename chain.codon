class Chain:
    min_score:int
    max_distance:int
    min_gap:int
    def __init__(self, min_score, max_distance, min_gap):
        self.min_score = min_score
        self.max_distance = max_distance
        self.min_gap = min_gap

    def concave_gap_cost(self, gap):
        if gap <= 0:
            return 0.0
        elif gap <= 10:
            return float(0.01 * gap)
        else:
            return float(0.005 * gap + 0.05)

    def chain_anchors(self, matches):
        # Filter and sort matches
        # matches = [match for match in matches if match[2] >= self.min_score]
        matches = [match for match in matches if match[2] >= self.min_score and (match[0] - matches[0][1]) > self.min_gap]
        matches.sort(key=lambda x: x[0])

        n = len(matches)
        print(n)
        dp = [0.0] * n  
        backtrack = [-1] * n  

        window = []

        for i in range(n):
            start_i, end_i, score_i = matches[i]
            dp[i] = score_i  
 
            while window and matches[window[0]][1] < start_i - self.max_distance:
                window.pop(0)

            for j in window:
                start_j, end_j, score_j = matches[j]
                gap = start_i - end_j
                penalty = self.concave_gap_cost(gap)
                potential_score = dp[j] + score_i - penalty

                if potential_score > dp[i]:
                    dp[i] = potential_score
                    backtrack[i] = j

            window.append(i)

        if n == 0:
            print("No matches available for chaining.")
            return [], 0.0

        max_index = max(range(n), key=lambda i: dp[i])
        max_score = dp[max_index]

        optimal_chain = []
        current = max_index
        while current != -1:
            optimal_chain.append(matches[current])
            current = backtrack[current]

        optimal_chain.reverse()

        return optimal_chain, max_score


